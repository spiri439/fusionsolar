from __future__ import annotations
import json
import time
import logging
import requests
from typing import Optional, Dict, Any, TypedDict, Literal, NamedTuple
from dataclasses import dataclass
import os
from enum import Enum

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class SignalType(str, Enum):
    ACTIVE_POWER = "Active power"
    CONSUMPTION = "Active power consumption"
    GRID_POWER = "Active power to grid"
    INVERTER_STATUS = "Inverter status"
    DAILY_ENERGY = "Daily energy"
    GRID_VOLTAGE = "Grid voltage"
    GRID_FREQUENCY = "Grid frequency"
    POWER_FACTOR = "Power factor"
    EFFICIENCY = "Efficiency"
    INTERNAL_TEMP = "Internal temperature"
    PEAK_POWER = "Peak active power of current day"
    TOTAL_ENERGY = "Total energy"

@dataclass
class SolarSignal:
    """Data structure for a solar signal"""
    name: str
    real_value: str
    unit: str
    value: str
    latest_time: int

def sendpb(title: str, body: str) -> None:
    """ Sending notification via pushbullet.
        Args:
            title (str) : title of text.
            body (str) : Body of text.
    """
    try:
        data_send = {"type": "note", "title": title, "body": body}
        ACCESS_TOKEN = 'pbtoken'
        resp = requests.post('https://api.pushbullet.com/v2/pushes', 
                           data=json.dumps(data_send),
                           headers={'Authorization': 'Bearer ' + ACCESS_TOKEN, 
                                  'Content-Type': 'application/json'})
        if resp.status_code != 200:
            logger.error(f"Failed to send Pushbullet notification. Status code: {resp.status_code}")
        else:
            logger.info(f"Sent Pushbullet notification: {title}")
    except Exception as e:
        logger.error(f"Failed to send Pushbullet notification: {str(e)}")

def log_all_signals(data: Dict[str, Any]) -> None:
    """Log all available signals from the response"""
    try:
        logger.info("=== Available Signals ===")
        for group in data.get('data', []):
            if isinstance(group, dict) and 'signals' in group:
                for signal in group['signals']:
                    name = signal.get('name', 'Unknown')
                    value = signal.get('realValue', 'N/A')
                    unit = signal.get('unit', '')
                    logger.info(f"{name}: {value} {unit}")
        logger.info("=====================")
    except Exception as e:
        logger.error(f"Failed to log signals: {str(e)}")

class PowerData(NamedTuple):
    """Structure for holding different power values"""
    active_power: float
    consumption: float
    grid_power: float

class SignalData(TypedDict):
    """Type hint for signal data from API"""
    id: int
    latestTime: int
    name: str
    realValue: str
    unit: str
    value: str

class APIResponse(TypedDict):
    """Type hint for API response"""
    buildCode: str
    data: list[Dict[str, Any]]
    failCode: int
    success: bool

class FusionSolarClient:
    """Client for interacting with Huawei FusionSolar API"""

    def __init__(self, cookies_file: str = "cookiepath.txt") -> None:
        self.base_url = "https://uni002eu5.fusionsolar.huawei.com"
        self.session = requests.Session()
        self.session.headers.update({
            'Accept': 'application/json',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        self._load_cookies(cookies_file)

    def _load_cookies(self, cookies_file: str) -> None:
        """Load cookies from JSON file"""
        try:
            with open(cookies_file, 'r') as f:
                cookies = json.load(f)
                for cookie in cookies:
                    self.session.cookies.set(
                        name=cookie['name'],
                        value=cookie['value'],
                        domain=cookie['domain'],
                        path=cookie.get('path', '/'),
                        secure=cookie.get('secure', False),
                        rest={'HttpOnly': cookie.get('httpOnly', False)}
                    )
            logger.info("Successfully loaded cookies from file")
        except Exception as e:
            error_msg = f"Failed to load cookies: {str(e)}"
            logger.error(error_msg)
            sendpb(
                "FusionSolar Cookie Error",
                f"Failed to load cookies for FusionSolar API\nError: {error_msg}"
            )
            raise

    def get_device_realtime_data(self, device_dn: str = "NE=165147722") -> Optional[APIResponse]:
        """
        Fetch realtime data for a specific device

        Args:
            device_dn: Device DN identifier (e.g., "NE=165147722")

        Returns:
            Optional[APIResponse]: Device realtime data if successful, None otherwise
        """
        try:
            data_url = f"{self.base_url}/rest/pvms/web/device/v1/device-realtime-data"
            params = {
                'deviceDn': device_dn,
                'displayAccessModel': 'true',
                '_': int(time.time() * 1000)
            }

            logger.info(f"Fetching realtime data for device: {device_dn}")
            response = self.session.get(data_url, params=params)

            if response.status_code == 200:
                try:
                    data = response.json()
                    logger.info("Successfully retrieved device realtime data")
                    return data
                except Exception as e:
                    error_msg = f"Failed to parse response as JSON: {str(e)}"
                    logger.error(error_msg)
                    sendpb(
                        "FusionSolar Data Error",
                        f"Failed to parse API response\nError: {error_msg}"
                    )
                    return None
            else:
                error_msg = f"Failed to get realtime data. Status code: {response.status_code}"
                logger.error(error_msg)
                sendpb(
                    "FusionSolar API Error",
                    f"Failed to fetch realtime data\nStatus Code: {response.status_code}\nDevice: {device_dn}"
                )
                return None

        except requests.exceptions.RequestException as e:
            error_msg = f"Realtime data request failed: {str(e)}"
            logger.error(error_msg)
            sendpb(
                "FusionSolar Connection Error",
                f"Failed to connect to FusionSolar API\nError: {error_msg}"
            )
            return None
        except Exception as e:
            error_msg = f"Failed to get realtime data: {str(e)}"
            logger.error(error_msg)
            sendpb(
                "FusionSolar Error",
                f"Unexpected error while fetching data\nError: {error_msg}"
            )
            return None

def send_to_domoticz(idx: int, value: float, name: str = "power") -> bool:
    """
    Send value to Domoticz

    Args:
        idx: Domoticz device index
        value: Value to send
        name: Name of the value for logging

    Returns:
        bool: True if successful, False otherwise
    """
    try:
        domoticz_url = "192.168.0.10:8124/json.htm"
        params = {
            'param': 'udevice',
            'type': 'command',
            'idx': idx,
            'nvalue': 0,
            'svalue': str(int(value))
        }
        auth = ('remote2', '3JFMxftFgtsnFc6pNM')

        logger.info(f"Sending {name} value to Domoticz (idx {idx}): {value}W")
        logger.info(f"Domoticz URL: {domoticz_url}")
        logger.info(f"Request params: {params}")

        response = requests.get(domoticz_url, params=params, auth=auth, timeout=10)
        logger.info(f"Domoticz response status code: {response.status_code}")
        logger.info(f"Domoticz response content: {response.text}")

        if response.status_code == 200:
            logger.info(f"Successfully sent {name} value to Domoticz: {value}W")
            return True
        else:
            logger.error(f"Failed to send to Domoticz. Status code: {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"Error sending to Domoticz: {str(e)}")
        return False

def extract_power_data(data: APIResponse) -> Optional[PowerData]:
    """Extract power values from FusionSolar response"""
    try:
        active_power = consumption = grid_power = 0.0
        found_any = False

        for group in data.get('data', []):
            if isinstance(group, dict) and 'signals' in group:
                for signal in group['signals']:
                    name = signal.get('name')
                    if name == SignalType.ACTIVE_POWER:
                        active_power = float(signal['realValue']) * 1000
                        logger.info(f"Extracted active power: {active_power/1000}kW ({active_power}W)")
                        found_any = True
                    elif name == SignalType.CONSUMPTION:
                        consumption = float(signal['realValue']) * 1000
                        logger.info(f"Extracted consumption: {consumption/1000}kW ({consumption}W)")
                        found_any = True
                    elif name == SignalType.GRID_POWER:
                        grid_power = float(signal['realValue']) * 1000
                        logger.info(f"Extracted grid power: {grid_power/1000}kW ({grid_power}W)")
                        found_any = True

        if found_any:
            return PowerData(active_power, consumption, grid_power)
        logger.error("No power values found in response data")
        return None
    except Exception as e:
        logger.error(f"Failed to extract power values: {str(e)}")
        return None

def get_second_device_power(client: FusionSolarClient, device_dn: str = "NE=165147724") -> Optional[float]:
    """
    Get active power from second device and send to Domoticz
    """
    try:
        data = client.get_device_realtime_data(device_dn)
        if data is not None:
            # Log all available signals first
            log_all_signals(data)

            # Extract active power
            for group in data.get('data', []):
                if isinstance(group, dict) and 'signals' in group:
                    for signal in group['signals']:
                        if signal.get('name') == SignalType.ACTIVE_POWER:
                            power_w = float(signal['realValue'])  # Already in watts, no conversion needed
                            logger.info(f"Extracted active power from second device: {power_w}W")
                            return power_w
            logger.error("Active power value not found in second device response data")
            return None
        else:
            logger.error("Failed to get data from second device")
            return None
    except Exception as e:
        error_msg = f"Failed to process second device data: {str(e)}"
        logger.error(error_msg)
        sendpb(
            "FusionSolar Second Device Error",
            f"Failed to process second device data\nError: {error_msg}"
        )
        return None

def get_fusion_solar_data(device_dn: str = "NE=165147722") -> None:
    """
    Main function to fetch realtime data from FusionSolar and send to Domoticz
    """
    try:
        client = FusionSolarClient()
        data = client.get_device_realtime_data(device_dn)

        if data is not None:
            # Log all available signals first
            log_all_signals(data)

            power_data = extract_power_data(data)
            if power_data is not None:
                # Send active power to idx 77
                if send_to_domoticz(77, power_data.active_power, "active power"):
                    logger.info("Successfully sent active power to Domoticz")
                else:
                    logger.error("Failed to send active power to Domoticz")

                # Get and send second device power to idx 78
                second_device_power = get_second_device_power(client)
                if second_device_power is not None:
                    if send_to_domoticz(78, second_device_power, "second device power"):
                        logger.info("Successfully sent second device power to Domoticz")
                    else:
                        logger.error("Failed to send second device power to Domoticz")
                else:
                    logger.error("Failed to get second device power")

                logger.info("Successfully completed the data fetch and forward process")
            else:
                logger.error("Failed to extract power values from response")
        else:
            logger.error("Failed to get data from FusionSolar")
    except Exception as e:
        error_msg = f"Failed to process data: {str(e)}"
        logger.error(error_msg)
        sendpb(
            "FusionSolar Processing Error",
            f"Failed to process solar data\nError: {error_msg}"
        )

if __name__ == "__main__":
    get_fusion_solar_data()
